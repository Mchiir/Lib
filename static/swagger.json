{
  "swagger": "2.0",
  "info": {
    "title": "Library Management API",
    "description": "API documentation for Library Management System",
    "version": "1.0.0"
  },
  "securityDefinitions": {
    "Bearer": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  },
  "paths": {
    "/": {
      "get": {
        "summary": "Welcome message",
        "description": "Returns a simple welcome message for the Library Management System API.",
        "tags":["Default"],
        "responses": {
          "200": {
            "description": "Welcome message",
            "schema": {
              "type": "string",
              "example": "Welcome to the Library Management System API"
            }
          }
        }
      }
    },
    "/auth/signup": {
      "post": {
        "summary": "Create a new user",
        "description": "Creates a new user by signing up.",
        "tags":["Authorization"],
        "parameters": [
          {
            "in": "body",
            "name": "user",
            "description": "User data to register",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SignupRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "User created successfully",
            "schema": {
              "$ref": "#/definitions/SignupResponse"
            }
          },
          "400": {
            "description": "Bad Request (e.g., validation errors)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "summary": "User login",
        "description": "Logs in the user and returns a JWT token if credentials are correct.",
        "tags":["Authorization"],
        "parameters": [
          {
            "in": "body",
            "name": "user",
            "description": "User credentials for login",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LoginRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Login successful",
            "schema": {
              "$ref": "#/definitions/LoginResponse"
            }
          },
          "400": {
            "description": "Bad Request (e.g., invalid credentials)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/auth": {
      "get": {
        "summary": "Get the current user",
        "description": "Fetches the details of the currently authenticated user.",
        "tags":["Authorization"],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "User details",
            "schema": {
              "$ref": "#/definitions/UserResponse"
            }
          },
          "401": {
            "description": "Unauthorized (missing or invalid token)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "put": {
        "summary": "Update user details",
        "description": "Updates the details of the currently authenticated user.",
        "tags":["Authorization"],
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "in": "body",
            "name": "user",
            "description": "Updated user data",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SignupRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User updated successfully",
            "schema": {
              "$ref": "#/definitions/SignupResponse"
            }
          },
          "400": {
            "description": "Bad Request (e.g., validation errors)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized (missing or invalid token)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete the current user",
        "description": "Deletes the currently authenticated user.",
        "tags":["Authorization"],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "User deleted successfully",
            "schema": {
              "$ref": "#/definitions/SignupResponse"
            }
          },
          "401": {
            "description": "Unauthorized (missing or invalid token)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/auth/all": {
      "get": {
        "summary": "Get all users",
        "description": "Fetches a list of all users.",
        "tags":["Authorization"],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "List of users",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserResponse"
              }
            }
          },
          "401": {
            "description": "Unauthorized (missing or invalid token)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },


    "/student": {
      "post": {
        "summary": "Create a new student",
        "description": "Creates a new student in the database.",
        "tags":["Students"],
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "in": "body",
            "name": "student",
            "description": "Student details to be created",
            "required": true,
            "schema": { "$ref": "#/definitions/Student" }
          }
        ],
        "responses": {
          "201": {
            "description": "Student created successfully",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Student created successfully"
                },
                "student": {
                  "type": "string",
                  "example": "Alice Johnson"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Validation or duplicate student ID",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "get": {
        "summary": "Find a student by stud_id, stud_name, or stud_class",
        "description": "Search for a student using query parameters. You can search by stud_id, stud_name, or stud_class.",
        "tags":["Students"],
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "stud_id",
            "description": "The ID of the student to search for",
            "type": "string",
            "example": "S001"
          },
          {
            "in": "query",
            "name": "stud_name",
            "description": "The name of the student to search for",
            "type": "string",
            "example": "Alice Johnson"
          },
          {
            "in": "query",
            "name": "stud_class",
            "description": "The class of the student to search for. Must be in the format S1 to S6 or S1A to S6D.",
            "type": "string",
            "example": "S1A"
          }
        ],
        "responses": {
          "200": {
            "description": "Students found matching the criteria",
            "schema": {
              "type": "object",
              "properties": {
                "students": {
                  "type": "array",
                  "items": { "$ref": "#/definitions/Student" }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid class format",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "No students found matching the criteria",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/student/addMany": {
      "post": {
        "summary": "Add multiple students",
        "description": "Adds multiple students in a single request, ensuring no duplicates are added.",
        "tags":["Students"],
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "in": "body",
            "name": "students",
            "description": "List of students to be added",
            "required": true,
            "schema": { "$ref": "#/definitions/StudentArray" }
          }
        ],
        "responses": {
          "201": {
            "description": "Students added successfully",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Students added successfully"
                },
                "addedStudents": { "$ref": "#/definitions/StudentArray" },
                "duplicateStudents": { "$ref":"#/definitions/StudentArray" }
              }
            }
          },
          "400": {
            "description": "Bad Request - Validation failed for some students",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/student/getAll": {
      "get": {
        "summary": "Get all students",
        "description": "Retrieves all students in the system.",
        "tags":["Students"],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "A list of all students",
            "schema": {
              "type": "object",
              "properties": {
                "students": { "$ref":"#/definitions/StudentArray" }
              }
            }
          },
          "404": {
            "description": "No students found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/student/{_id}": {
      "put": {
        "summary": "Edit a student's information",
        "description": "Update a student's details such as name, class, etc., using their student ID (_id).",
        "tags":["Students"],
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "_id",
            "required": true,
            "description": "The unique ID of the student to be updated.",
            "type": "string",
            "example": "607d1f77bcf86cd799439011"
          },
          {
            "in": "body",
            "name": "student",
            "description": "The student information to update.",
            "schema": { "$ref":"#/definitions/Student" }
          }
        ],
        "responses": {
          "200": {
            "description": "Student updated successfully",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Student updated successfully"
                },
                "student": {
                  "type": "object",
                  "properties": { "students":{ "$ref": "#/definitions/Student" } }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid data provided",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Student not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/student/deleteOne/{_id}": {
      "delete": {
        "summary": "Delete a student by their ID",
        "description": "Delete a student based on their unique student ID (_id).",
        "tags":["Students"],
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "_id",
            "required": true,
            "description": "The unique ID of the student to be deleted.",
            "type": "string",
            "example": "607d1f77bcf86cd799439011"
          }
        ],
        "responses": {
          "200": {
            "description": "Student deleted successfully",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Student deleted successfully"
                },
                "name": {
                  "type": "string",
                  "example": "John Doe"
                }
              }
            }
          },
          "404": {
            "description": "Student not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/student/deleteAll": {
      "delete": {
        "summary": "Delete all students",
        "description": "Delete all students in the database.",
        "tags":["Students"],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "All students deleted successfully",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "All students deleted successfully"
                }
              }
            }
          },
          "404": {
            "description": "No students found to delete",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/student/deleteBatch": {
      "delete": {
        "summary": "Delete a batch of students",
        "description": "Delete multiple students in a single request based on an array of student IDs.",
        "tags":["Students"],
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "in": "body",
            "name": "stud_ids",
            "description": "An array of student IDs to be deleted.",
            "schema": { "$ref":"#/definitions/StudentIDList" }
          }
        ],
        "responses": {
          "200": {
            "description": "Batch of students deleted successfully",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "3 students deleted successfully"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid or empty student IDs array",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "No students found for the provided IDs",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },

    
    "/book": {
      "post": {
        "summary": "Add a new book",
        "tags": ["Books"],
        "security": [{ "Bearer": [] }],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": { "$ref": "#/definitions/Book" }
          }
        ],
        "responses": {
          "201": { "description": "Book added successfully" },
          "400": { "$ref": "#/definitions/ErrorResponse" }
        }
      }
    },
    "/book/findAll": {
      "get": {
        "summary": "Get all books",
        "tags": ["Books"],
        "security": [{ "Bearer": [] }],
        "responses": {
          "200": {
            "description": "List of all books",
            "schema": { "type": "array", "items": { "$ref": "#/definitions/Book" } }
          },
          "404": { "$ref": "#/definitions/ErrorResponse" }
        }
      }
    },
    "/book/getByAvailability": {
      "get": {
        "summary": "Get available books",
        "tags": ["Books"],
        "security": [{ "Bearer": [] }],
        "parameters": [
          {
            "name": "isAvailable",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "List of available books",
            "schema": { "type": "array", "items": { "$ref": "#/definitions/Book" } }
          },
          "404": { "$ref": "#/definitions/ErrorResponse" }
        }
      }
    },
    "/book/findBook": {
      "get": {
        "summary": "Find books by query parameters",
        "tags": ["Books"],
        "security": [{ "Bearer": [] }],
        "parameters": [
          { "name": "book_id", "in": "query", "type": "string" },
          { "name": "book_no", "in": "query", "type": "integer" },
          { "name": "publisher", "in": "query", "type": "string" },
          { "name": "category", "in": "query", "type": "string" },
          { "name": "level", "in": "query", "type": "string" }
        ],
        "responses": {
          "200": {
            "description": "List of matching books",
            "schema": { "type": "array", "items": { "$ref": "#/definitions/Book" } }
          },
          "404": { "$ref": "#/definitions/ErrorResponse" }
        }
      }
    },
    "/book/{book_id}": {
      "put": {
        "summary": "Update a book",
        "tags": ["Books"],
        "security": [{ "Bearer": [] }],
        "parameters": [
          { "name": "book_id", "in": "path", "required": true, "type": "string" },
          { "in": "body", "name": "body", "required": true, "schema": { "$ref": "#/definitions/Book" } }
        ],
        "responses": {
          "200": { "description": "Book updated successfully" },
          "404": { "$ref": "#/definitions/ErrorResponse" }
        }
      }
    },
    "/book/deleteById/{book_id}": {
      "delete": {
        "summary": "Delete a book",
        "tags": ["Books"],
        "security": [{ "Bearer": [] }],
        "parameters": [
          { "name": "book_id", "in": "path", "required": true, "type": "string" }
        ],
        "responses": {
          "200": { "description": "Book deleted successfully" },
          "404": { "$ref": "#/definitions/ErrorResponse" }
        }
      }
    },
    "/book/deleteAll": {
      "delete": {
        "summary": "Delete all books",
        "tags": ["Books"],
        "security": [{ "Bearer": [] }],
        "responses": {
          "200": { "description": "All books deleted successfully" },
          "404": { "$ref": "#/definitions/ErrorResponse" }
        }
      }
    },

    "/transaction/borrowBook": {
      "post": {
        "summary": "Borrow a book",
        "tags": ["Transactions"],
        "security": [{ "Bearer": [] }],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Transaction"
            }
          }
        ],
        "responses": {
          "201": { "description": "Book borrowed successfully" },
          "400": { "$ref": "#/definitions/ErrorResponse" }
        }
      }
    },
    "/transaction/returnBook": {
      "put": {
        "summary": "Return a borrowed book",
        "tags": ["Transactions"],
        "security": [{ "Bearer": [] }],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "transaction_id": {
                  "type": "string",
                  "example": "65a3b4c2d9f40e1234567890"
                }
              }
            }
          }
        ],
        "responses": {
          "200": { "description": "Book returned successfully" },
          "400": { "$ref": "#/definitions/ErrorResponse" }
        }
      }
    },
    "/transaction/getAllTransactions": {
      "get": {
        "summary": "Retrieve all transactions",
        "tags": ["Transactions"],
        "security": [{ "Bearer": [] }],
        "responses": {
          "200": {
            "description": "List of transactions",
            "schema": {
              "type": "array",
              "items": { "$ref": "#/definitions/Transaction" }
            }
          }
        }
      }
    },
    "/transaction/findTransaction": {
      "get": {
        "summary": "Find a transaction",
        "tags": ["Transactions"],
        "security": [{ "Bearer": [] }],
        "parameters": [
          { "name": "_id", "in": "query", "type": "string", "description": "Transaction ID (if searching by ID)" },
          { "name": "stud_id", "in": "query", "type": "string", "description": "Student ID (optional)" },
          { "name": "book_id", "in": "query", "type": "string", "description": "Book ID (optional)" },
          { "name": "borrow_date", "in": "query", "type": "string", "format": "date-time", "example": "2024-02-01T10:00:00Z" },
          { "name": "return_date", "in": "query", "type": "string", "format": "date-time", "example": "2024-02-01T10:00:00Z" },
          { "name": "status", "in": "query", "type": "string", "enum": ["borrowed", "returned"], "example": "borrowed" }
        ],
        "responses": {
          "200": {
            "description": "Transaction details",
            "schema": { "$ref": "#/definitions/Transaction" }
          },
          "400": {
            "description": "Invalid query parameters",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "404": {
            "description": "Transaction not found",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          }
        }
      }
    },
    "/transaction/updateTransaction/{transaction_id}": {
      "put": {
        "summary": "Update a transaction",
        "tags": ["Transactions"],
        "security": [{ "Bearer": [] }],
        "parameters": [
          {
            "name": "transaction_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Transaction"
            }
          }
        ],
        "responses": {
          "200": { "description": "Transaction updated successfully" },
          "400": { "$ref": "#/definitions/ErrorResponse" }
        }
      }
    },
    "/transaction/deleteTransaction/{transaction_id}": {
      "delete": {
        "summary": "Delete a transaction",
        "tags": ["Transactions"],
        "security": [{ "Bearer": [] }],
        "parameters": [
          {
            "name": "transaction_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": { "description": "Transaction deleted successfully" },
          "400": { "$ref": "#/definitions/ErrorResponse" }
        }
      }
    }
  },
  "definitions": {
    "SignupRequest": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string",
          "example": "@johndoe"
        },
        "full_name": {
          "type": "string",
          "example": "john doe"
        },
        "password": {
          "type": "string",
          "example": "password123"
        },
        "email": {
          "type": "string",
          "example": "johndoe@gmail.com"
        },
        "role": {
          "type": "string",
          "example": "USER"
        },
        "user_profile_image": {
          "type": "string",
          "example": "C:/image.png or https://example.com/profile.jpg, this also optional"
        }
      },
      "required": ["username", "full_name", "password", "email", "role"]
    },
    "SignupResponse": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "example": "User created successfully"
        },
        "username": {
          "type": "string",
          "example": "johndoe"
        }
      }
    },
    "LoginRequest": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string",
          "example": "johndoe"
        },
        "password": {
          "type": "string",
          "example": "password123"
        }
      },
      "required": ["username", "password"]
    },
    "LoginResponse": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "example": "Login successful"
        },
        "token": {
          "type": "string",
          "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        }
      }
    },
    "UserResponse": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string",
          "example": "johndoe"
        },
        "full_name": {
          "type": "string",
          "example": "John Doe"
        },
        "email": {
          "type": "string",
          "example": "johndoe@gmail.com"
        },
        "role": {
          "type": "string",
          "example": "USER"
        }
      }
    },
    "Student": {
      "type": "object",
      "properties": {
        "stud_id": { "type": "string", "example": "S001" },
        "stud_name": { "type": "string", "example": "Alice Johnson" },
        "stud_class": { "type": "string", "example": "S1A" }
      },
      "required": ["stud_id", "stud_name", "stud_class"]
    },
    "StudentArray": {
      "type": "array",
      "items": { "$ref": "#/definitions/Student" }
    },
    "StudentIDList": {
      "type": "array",
      "items": {
        "type": "string",
        "example": "S001"
      }
    },  
    "Book": {
      "type": "object",
      "properties": {
        "book_no": { "type": "integer", "example": 123456 },
        "publisher": { "type": "string", "example": "Pearson" },
        "category": { "type": "string", "enum": [
          "Physics", "Mathematics", "Chemistry", "Biology",
          "History", "Literature", "Geography", "English",
          "Ikinyarwanda", "Entrepreneurship", "ICT"
        ] },
        "level": { "type": "string", "example": "S1" },
        "isAvailable": { "type": "boolean", "example": true }
      }
    },
    "Transaction": {
      "type": "object",
      "properties": {
        "stud_id": {
          "type": "string",
          "example": "65a3b4c2d9f40e1234567890"
        },
        "book_id": {
          "type": "string",
          "example": "65a3b4c2d9f40e1234567891"
        },
        "borrow_date": {
          "type": "string",
          "format": "date-time",
          "example": "2024-02-01T10:00:00Z"
        },
        "return_date": {
          "type": "string",
          "format": "date-time",
          "example": "2024-02-15T10:00:00Z",
          "nullable": true
        },
        "status": {
          "type": "string",
          "enum": ["borrowed", "returned"],
          "example": "borrowed"
        },
        "history": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "action": {
                "type": "string",
                "enum": ["borrowed", "returned"],
                "example": "borrowed"
              },
              "date": {
                "type": "string",
                "format": "date-time",
                "example": "2024-02-01T10:00:00Z"
              }
            }
          }
        }
      },
      "required": ["stud_id", "book_id", "status"]
    },
    "ErrorResponse": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "example": "Invalid username or password"
        },
        "error": {
          "type": "string",
          "example": "Bad Request"
        }
      }
    }
  }
}